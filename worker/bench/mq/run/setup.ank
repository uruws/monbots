// mq bot classroom and students setup

bot_login()

// create classroom

params = url.parse_query("name=mqbot_cr0&grade=5")
resp = bot.post_form("/classroom/create", params)

if !check.http_status(resp, http.status_ok) {
	bot_logout()
	return "http status error"
}

if !check.json_match(resp, "response status", `{"status": "success"}`) {
	bot_logout()
	return "response status error"
}

class_id = "NONE"
rmap, err = response.json_map(resp)
if err != nil {
	log.error("%v", err)
	bot_logout()
	return "json error"
} else {
	class_id = rmap["data"]["_id"]
}

// add students

students = 10

for i = 0; i < students; i++ {
	st_contacts = map[string]interface{
		"firstName": sprintf("mqbot_st%d_ct", i),
		"lastName": sprintf("mqbot_st%d_ct_lastname", i),
		"language": "en",
		"relationship": map[string]string{
			"value": "mother",
			"name": "Mother",
		},
		"number": sprintf("+555666000%d", i),
	}
	st = map[string]interface{
		"firstName": sprintf("mqbot_st%d", i),
		"lastName": sprintf("mqbot_st%d_lastname", i),
		"grade": 5,
		"classrooms": []string{class_id},
		"contacts": []map[string]interface{st_contacts},
	}
	st_params, err = json.marshal(st)
	if err != nil {
		log.error("%v", err)
		continue
	}
	resp = bot.post_json("/student/create", st_params)
	check.http_status(resp, http.status_ok)
	check.json_match(resp, "response status", `{"status": "success"}`)
}

bot_logout()
