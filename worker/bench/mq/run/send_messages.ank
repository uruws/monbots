// mq bot send messages to classroom and students

bot_login()

// students

//~ resp = bot.get("/students/get")

//~ if !check.http_status(resp, http.status_ok) {
	//~ bot_logout()
	//~ return "http status error"
//~ }

//~ rmap, err = response.json_map(resp)
//~ if err != nil {
	//~ log.error("%v", err)
	//~ bot_logout()
	//~ return "json error"
//~ }

//~ st_list = rmap["data"]["students"]
//~ for st in st_list {
	//~ st_id = st["_id"]
	//~ params = url.parse_queryf("studentId=%s", st_id)
	//~ resp = bot.post_form("/student/delete", params)
	//~ check.http_status(resp, http.status_ok)
//~ }

// class rooms

resp = bot.get("/classroom/classrooms")

if !check.http_status(resp, http.status_ok) {
	bot_logout()
	return "http status error"
}

rmap, err = response.json_map(resp)
if err != nil {
	log.error("%v", err)
	bot_logout()
	return "json error"
}

cr_list = rmap["data"]["classrooms"]
for cr in cr_list {
	cr_id = cr["_id"]
	cr_name = cr["name"]
	params = sprintf(`{"text":"testing message for class %s", "classrooms":["%s"]}`, cr_name, cr_id)
	resp = bot.post_json("/messages/compose", params)
	check.http_status(resp, http.status_ok)
}

bot_logout()
